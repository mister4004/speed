import os
import json
import time
import requests
from datetime import datetime, timedelta

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
CONFIG_FILE = os.path.join(BASE_DIR, "config.json")

try:
    with open(CONFIG_FILE, "r", encoding="utf-8") as f:
        config = json.load(f)
except FileNotFoundError:
    print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
    exit(1)
except json.JSONDecodeError:
    print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {CONFIG_FILE} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.")
    exit(1)

TELEGRAM_BOT_TOKEN = config.get("telegram_bot_token")
TELEGRAM_CHAT_ID = config.get("telegram_chat_id")
LOG_DIR = config.get("log_dir")
CHECK_INTERVAL_SECONDS = config.get("check_interval_seconds", 300) # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 300 —Å–µ–∫—É–Ω–¥

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID or not LOG_DIR:
    print("–û—à–∏–±–∫–∞: –í —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID –∏–ª–∏ LOG_DIR.")
    exit(1)

# --- –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π ---
PROCESSED_SESSIONS_FILE = os.path.join(LOG_DIR, "processed_sessions.json")

# --- –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram API ---
def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π Telegram —á–∞—Ç."""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        # print(f"Telegram-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {message[:50]}...") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–∞, –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º (–∫–∞–∫–∏–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã) ---
def load_processed_sessions():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞."""
    if os.path.exists(PROCESSED_SESSIONS_FILE):
        with open(PROCESSED_SESSIONS_FILE, "r", encoding="utf-8") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: —Ñ–∞–π–ª {PROCESSED_SESSIONS_FILE} –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.")
                return {}
    return {}

def save_processed_sessions(processed_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏—è—Ö –≤ JSON-—Ñ–∞–π–ª."""
    with open(PROCESSED_SESSIONS_FILE, "w", encoding="utf-8") as f:
        json.dump(processed_data, f, indent=4)

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ ---
def run_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    processed_sessions = load_processed_sessions()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ client-info –ª–æ–≥–æ–≤...")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å processed_sessions –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
    last_checked_day = datetime.now().strftime("%Y-%m-%d")

    while True:
        current_day_str = datetime.now().strftime("%Y-%m-%d")

        # –ï—Å–ª–∏ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è, –æ—á–∏—â–∞–µ–º/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º processed_sessions –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è
        if current_day_str != last_checked_day:
            processed_sessions[current_day_str] = []
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π) –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–Ω—è
            seven_days_ago = datetime.now() - timedelta(days=7)
            keys_to_delete = [
                date_str for date_str in processed_sessions
                if datetime.strptime(date_str, "%Y-%m-%d") < seven_days_ago
            ]
            for key in keys_to_delete:
                del processed_sessions[key]
            save_processed_sessions(processed_sessions)
            last_checked_day = current_day_str
            print(f"–î–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è –Ω–∞ {current_day_str}. –°–±—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–Ω—è.")


        log_file_name = f"client-info-{current_day_str}.json"
        log_file_path = os.path.join(LOG_DIR, log_file_name)

        if current_day_str not in processed_sessions:
            processed_sessions[current_day_str] = []

        current_day_processed_sessions_set = set(processed_sessions[current_day_str])
        new_visitors_this_iteration = []

        if not os.path.exists(log_file_path):
            print(f"–§–∞–π–ª –ª–æ–≥–æ–≤ {log_file_name} –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–∂–∏–¥–∞–µ–º...")
            time.sleep(CHECK_INTERVAL_SECONDS)
            continue

        try:
            # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            with open(log_file_path, "r", encoding="utf-8") as f:
                log_data = json.load(f)
        except json.JSONDecodeError:
            print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –∏–∑ {log_file_path}. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–ø–∏—Å–∞–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é.")
            time.sleep(CHECK_INTERVAL_SECONDS)
            continue
        except FileNotFoundError:
            print(f"–§–∞–π–ª –ª–æ–≥–æ–≤ {log_file_name} –∏—Å—á–µ–∑. –û–∂–∏–¥–∞–µ–º...")
            time.sleep(CHECK_INTERVAL_SECONDS)
            continue
        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {log_file_path}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é.")
            time.sleep(CHECK_INTERVAL_SECONDS)
            continue

        for entry in log_data:
            session_id = entry.get("sessionId")
            ip_info = entry.get("ipInfo")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ session_id –Ω–æ–≤—ã–π –∏ –µ—Å—Ç—å –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
            # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æDeviceInfo –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –ø—É—Å—Ç–æ–π (—á–∞—Å—Ç–æ –ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–µ–∑ –Ω–µ–≥–æ)
            if session_id and session_id not in current_day_processed_sessions_set and ip_info and entry.get("deviceInfo"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ip_info –∏ deviceInfo –Ω–µ null –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–µ–∑–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if ip_info.get("ip") and ip_info.get("country") and \
                   entry["deviceInfo"].get("browser") and entry["deviceInfo"].get("os"):
                    new_visitors_this_iteration.append(entry)
                    current_day_processed_sessions_set.add(session_id)
                    processed_sessions[current_day_str].append(session_id) # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

        if new_visitors_this_iteration:
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(new_visitors_this_iteration)} –Ω–æ–≤—ã–π(—Ö) –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å(–µ–π) –∑–∞ —ç—Ç—É –∏—Ç–µ—Ä–∞—Ü–∏—é. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...")
            for visitor in new_visitors_this_iteration:
                message = format_visitor_message(visitor)
                send_telegram_message(message)
                time.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API

            save_processed_sessions(processed_sessions)
        else:
            print("–ù–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        time.sleep(CHECK_INTERVAL_SECONDS)

def format_visitor_message(visitor_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram."""
    timestamp_iso = visitor_data.get("timestamp", "N/A")
    try:
        dt_utc = datetime.fromisoformat(timestamp_iso.replace('Z', '+00:00'))
        display_time = dt_utc.strftime("%Y-%m-%d %H:%M:%S UTC")
    except ValueError:
        display_time = timestamp_iso

    ip_info = visitor_data.get("ipInfo", {})
    device_info = visitor_data.get("deviceInfo", {})

    message = f"<b>üîî –ù–æ–≤—ã–π –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—å –Ω–∞ Cloud-Hosts.org!</b>\n"
    message += f"üïí <b>–í—Ä–µ–º—è:</b> {display_time}\n"

    ip = ip_info.get("ip", "N/A")
    country = ip_info.get("country", "N/A")
    city = ip_info.get("city", "N/A")
    region = ip_info.get("region", "N/A") # –î–æ–±–∞–≤–ª–µ–Ω–æ
    isp = ip_info.get("isp", "N/A")
    proxy = "‚úÖ –î–∞" if ip_info.get("proxy") else "‚ùå –ù–µ—Ç"

    message += f"\n<b>üìç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± IP:</b>\n"
    message += f"¬†¬† IP: <code>{ip}</code>\n"
    message += f"¬†¬† –°—Ç—Ä–∞–Ω–∞: {country}\n"
    if city and city != "N/A":
        message += f"¬†¬† –ì–æ—Ä–æ–¥: {city}\n"
    if region and region != "N/A" and region != city: # –î–æ–±–∞–≤–ª–µ–Ω–æ, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç
        message += f"¬†¬† –†–µ–≥–∏–æ–Ω: {region}\n"
    message += f"¬†¬† –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {isp}\n"
    message += f"¬†¬† Proxy/VPN: {proxy}\n"

    browser = device_info.get("browser", "N/A")
    os_name = device_info.get("os", "N/A")
    device_type = device_info.get("deviceType", "N/A")
    resolution = device_info.get("resolution", "N/A")
    language = device_info.get("language", "N/A")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ WebGL, WebRTC, CookiesEnabled, JavaEnabled (–µ—Å–ª–∏ –µ—Å—Ç—å)
    webgl = "‚úÖ –î–∞" if device_info.get("webGL") else "‚ùå –ù–µ—Ç"
    webrtc = "‚úÖ –î–∞" if device_info.get("webRTC") else "‚ùå –ù–µ—Ç"
    cookies = "‚úÖ –î–∞" if device_info.get("cookiesEnabled") else "‚ùå –ù–µ—Ç"

    message += f"\n<b>üì± –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ:</b>\n"
    message += f"¬†¬† –ë—Ä–∞—É–∑–µ—Ä: {browser}\n"
    message += f"¬†¬† –û–°: {os_name}\n"
    message += f"¬†¬† –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_type}\n"
    if resolution and resolution != "N/A":
        message += f"¬†¬† –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {resolution}\n"
    message += f"¬†¬† –Ø–∑—ã–∫: {language}\n"
    message += f"¬†¬† WebGL: {webgl}\n"
    message += f"¬†¬† WebRTC: {webrtc}\n"
    message += f"¬†¬† Cookies: {cookies}\n"


    local_ip_error = visitor_data.get("localIpError")
    if local_ip_error:
        message += f"¬†¬† <i>–õ–æ–∫–∞–ª—å–Ω—ã–π IP: {local_ip_error}</i>\n"

    return message

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç ---
if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ñ–∞–π–ª–∞ processed_sessions.json
    # –≠—Ç–æ—Ç —Ñ–∞–π–ª –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ LOG_DIR, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'mister' –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ LOG_DIR
    processed_sessions_file_path = os.path.join(LOG_DIR, "processed_sessions.json")
    if not os.path.exists(processed_sessions_file_path):
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            with open(processed_sessions_file_path, "w", encoding="utf-8") as f:
                json.dump({}, f)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞
            os.chmod(processed_sessions_file_path, 0o640) # rw-r-----
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ processed_sessions.json: {e}")

    run_bot()

